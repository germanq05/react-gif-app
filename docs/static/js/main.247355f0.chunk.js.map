{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","placeholder","value","onChange","target","prototype","PropTypes","func","isRequired","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"oNAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACI,sBAAMC,SATW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAKlB,SACI,uBAAOO,KAAK,OAAOC,YAAY,oBAC3BC,MAAOV,EAAYW,SAfL,SAACR,GACvBF,EAAcE,EAAES,OAAOF,aAmB/Bb,EAAYgB,UAAY,CACpBf,cAAegB,IAAUC,KAAKC,Y,mCC5B5BC,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAENC,EAFM,iDAE2CC,UAAUH,GAFrD,+DAGOI,MAAMF,GAHb,cAGNG,EAHM,gBAIWA,EAAKC,OAJhB,uBAIJC,EAJI,EAIJA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAV9B,kBAcLM,GAdK,4CAAH,sDAiBET,ICHAgB,EAZK,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAI1B,OAFAc,QAAQC,IAAIL,EAAOV,GAGf,sBAAKgB,UAAU,OAAf,UACI,qBAAKC,IAAMjB,EAAMkB,IAAMlB,IACvB,4BAAIU,QCoBDS,EAzBC,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAGf,ECJwB,SAACA,GAEzB,MAA0BnB,mBAAS,CAC/B0B,KAAM,GACNe,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAmBA,OAdAC,qBAAU,WAEN1B,EAAQC,GACH0B,MAAK,SAAAC,GACFC,YAAW,WACPJ,EAAS,CACLjB,KAAMoB,EACNL,SAAS,MAEd,UAGZ,CAACtB,IAEGuB,EDjBiBM,CAAc7B,GAA/BO,EAAP,EAAOA,KAAMe,EAAb,EAAaA,QAGb,OACI,qCACI,mCAAMtB,EAAN,OAECsB,GAAW,wCAEZ,qBAAKJ,UAAU,YAAf,SAEQX,EAAKE,KAAI,SAAAC,GAAG,OACR,cAAC,EAAD,eACQA,GADUA,EAAIC,aEfjCmB,EAAe,WAExB,MAAoCjD,mBAAS,CAAC,WAA9C,mBAAOkD,EAAP,KAAmBnD,EAAnB,KAOA,OACI,qCACI,8CAEA,cAAC,EAAD,CAAaA,cAAgBA,IAE7B,uBACA,6BAEQmD,EAAWtB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAA0BA,SAAWA,GAAtBA,Y,MClBvCgC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.247355f0.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategories }) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value)\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (inputValue.trim().length > 2) {\n            setCategories(cats => [inputValue, ...cats]);\n            setInputValue('');\n        }\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input type=\"text\" placeholder=\"Agregue categoria\"\n                value={inputValue} onChange={handleInputChange} />\n        </form>\n    )\n}\n\nAddCategory.prototype = {\n    setCategories: PropTypes.func.isRequired\n}\n","const getGifs = async ( category ) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=5qpjOPb6eGibLeZho1ffXOVm9e6GTnXc`;\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n\n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n\n    return gifs; //Devuelve promesa que resuelve la coleccion de las imagenes\n}\n\nexport default getGifs;","import React from 'react'\n\nconst GifGridItem = ( {title, url} ) => {\n    \n    console.log(title, url);\n\n    return (\n        <div className=\"card\">\n            <img src={ url } alt={ url }/>\n            <p>{title}</p>\n        </div>\n    )\n}\n\nexport default GifGridItem\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport GifGridItem from './GifGridItem';\n\nconst GifGrid = ({ category }) => {\n\n\n    const {data, loading} = useFetchGifs( category );\n\n\n    return (\n        <>\n            <h3> {category} </h3>\n\n            {loading && <p>Loading</p> }\n\n            <div className=\"card-grid\">\n                {\n                    data.map(img => (\n                        <GifGridItem key={img.id}\n                            {...img}\n                        />\n                    ))\n                }\n            </div>\n        </>\n    )\n}\n\nexport default GifGrid\n","import { useState, useEffect } from 'react'\nimport getGifs from '../helpers/getGifs.js'\n\nexport const useFetchGifs = (category) => {\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(() => {\n\n        getGifs(category)\n            .then(imgs => {\n                setTimeout(() => {\n                    setState({\n                        data: imgs,\n                        loading: false\n                    });\n                }, 3000)\n            });\n\n    }, [category])\n\n    return state;\n}\n","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n\n    const [categories, setCategories] = useState(['Terror']);\n    \n/*\n    const handleAdd = () => {\n        setCategories( [...categories, \"Otra\"] );\n    }\n*/\n    return(\n        <>\n            <h2>GifExpertApp</h2>\n            \n            <AddCategory setCategories={ setCategories }/>\n\n            <hr/>\n            <ol>\n                { \n                    categories.map( category => (\n                        <GifGrid key={ category } category={ category} />\n                    ))\n                }\n            </ol>\n\n        </>\n    )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}